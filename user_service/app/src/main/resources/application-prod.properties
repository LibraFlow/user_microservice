# Server configuration
server.port=${PORT:8080}
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.max-connections=10000
server.tomcat.accept-count=100
server.tomcat.connection-timeout=60000

# Database connection settings for Cloud SQL
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql:///${SPRING_DATASOURCE_DATABASE}?cloudSqlInstance=${INSTANCE_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=${SPRING_DATASOURCE_USERNAME}&password=${SPRING_DATASOURCE_PASSWORD}}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.leak-detection-threshold=30000

# JPA configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_size=50

# Logging configuration
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.backend2=DEBUG
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Health check configuration
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always
management.endpoint.health.group.readiness.include=db
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.health.db.enabled=true
management.health.diskspace.enabled=true

# Startup configuration
spring.main.allow-circular-references=false
spring.main.lazy-initialization=false
spring.main.banner-mode=off
spring.main.web-application-type=servlet

# Disable Cloud SQL auto-configuration
spring.cloud.gcp.sql.enabled=false
spring.cloud.gcp.core.enabled=false

# JWT secret (must be set via environment variable)
JWT_SECRET=${JWT_SECRET}

# Encryption key (must be set via environment variable)
encryption.key=${ENCRYPTION_KEY}

# Spring Boot configuration
spring.application.name=user-service

# Kafka configuration for Cloud deployment
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.consumer.group-id=libraflow-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Disable Kafka auto-configuration if no Kafka server is provided
spring.autoconfigure.exclude=${KAFKA_AUTO_CONFIGURE_EXCLUDE:}

# Enable detailed startup logging
logging.level.org.springframework.boot.autoconfigure=DEBUG
logging.level.org.springframework.boot.context=DEBUG
logging.level.org.springframework.boot.web.servlet=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.jdbc=DEBUG
logging.level.org.hibernate=DEBUG 